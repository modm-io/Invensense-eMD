/*
 * Copyright (c) 2018 Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

// Porting the time functions
#include <modm/architecture/interface/clock.hpp>
#include <modm/processing/timer/timeout.hpp>

extern "C"
{

void inv_delay_ms(uint32_t num_ms)
{
	modm::Timeout t{std::chrono::milliseconds(num_ms)};
	while(not t.isExpired()) ;
}

void inv_get_ms(uint32_t *count)
{
	*count = modm::Clock::now().time_since_epoch().count();
}

}

// ----------------------------------------------------------------------------
// Porting the I2C functions
#include <invensense/modm.hpp>

class EMPL_Transaction : public modm::I2cWriteReadTransaction
{
	uint8_t addressBuffer[1];
	bool writeAddress;
public:
	inline EMPL_Transaction() :
		modm::I2cWriteReadTransaction(0b1101000), writeAddress(false)
	{}

	inline bool
	configureWrite(uint8_t address, const uint8_t *buffer, std::size_t size)
	{
		if (I2cWriteReadTransaction::configureWrite(buffer, size))
		{
			addressBuffer[0] = address;
			writeAddress = true;
			return true;
		}
		return false;
	}

	inline bool
	configureRead(uint8_t address, uint8_t *buffer, std::size_t size)
	{
		addressBuffer[0] = address;
		writeAddress = false;
		return I2cWriteReadTransaction::configureWriteRead(addressBuffer, 1, buffer, size);
	}

protected:
	inline virtual modm::I2cTransaction::Writing
	writing() override
	{
		if (writeAddress)
		{
			writeAddress = false;
			return Writing(addressBuffer, 1, OperationAfterWrite::Write);
		}
		return I2cWriteReadTransaction::writing();
	}
} transaction;

invensense::emd::i2c_handler_t i2c_start = nullptr;
bool invensense::emd::set_i2c_handler(i2c_handler_t handler)
{
	if (i2c_start == nullptr) {
		i2c_start = handler;
		return true;
	}
	return false;
}

extern "C"
{

unsigned char *mpl_key = (unsigned char *)"eMPL 5.1";

int inv_i2c_write(uint8_t slave_addr,
				   uint8_t reg_addr,
				   uint8_t length,
				   uint8_t const *data)
{
	if (i2c_start) {
		transaction.setAddress(slave_addr);
		transaction.configureWrite(reg_addr, data, length);
		i2c_start(&transaction);
		while(transaction.isBusy()) ;
		return (transaction.getState() == transaction.TransactionState::Error) ? 1 : 0;
	}
	return -1;
}

int inv_i2c_read(uint8_t slave_addr,
				  uint8_t reg_addr,
				  uint8_t length,
				  uint8_t *data)
{
	if (i2c_start) {
		transaction.setAddress(slave_addr);
		transaction.configureRead(reg_addr, data, length);
		i2c_start(&transaction);
		while(transaction.isBusy()) ;
		return (transaction.getState() == transaction.TransactionState::Error) ? 1 : 0;
	}
	return -1;
}

}

%% if env.get(":emd:driver:log", False)
// ----------------------------------------------------------------------------
// Porting the UART functions
invensense::emd::uart_handler_t uart_tx = nullptr;
bool invensense::emd::set_uart_handler(uart_handler_t handler)
{
	if (uart_tx == nullptr) {
		uart_tx = handler;
		return true;
	}
	return false;
}

extern "C"
{

int inv_fputc(int c)
{
	if (uart_tx) {
		if (uart_tx((uint8_t) c))
			return c;
	}
	return modm::IOStream::eof;
}

#include <modm/io/iostream.hpp>
class BufferDevice : public modm::IODevice
{
	char *const buffer;
	const size_t max_length;
	size_t count = 0;
public:
	BufferDevice(char *buffer, size_t length):
		buffer(buffer), max_length(length) {}
	virtual void write(char c) override
	{ if (count < max_length) buffer[count++] = c; }
	virtual bool read(char&) override { return false; }
	virtual void flush() override {}
	size_t size() const { return count; }
};

int inv_vsnprintf(char *s, size_t n, const char *fmt, va_list args)
{
	BufferDevice buffer(s, n);
	modm::IOStream stream(buffer);
	stream.vprintf(fmt, args);
	return buffer.size();
}

}
%% endif
